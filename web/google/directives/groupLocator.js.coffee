# Creates a google maps group locator. This should be used to display
# a continually changing set of groups on a google map canvas.
# Example usage.
#
#     <div class="group-locator"
#          groups="groups"
#          map-handle="gmap">
#     </div>
#
# The above would create a google map object, and display all the
# groups inside the $scope variable `groups` on the map, as clickable
# pins.
#
# The map-handle attribute specifies the $scope variable that will be
# assigned a handle to the GoogleMap instance generated by this
# directive. Crucially, this can then be used for other mapping tools.
#
# Querying google geocode should be done separately, with the results
# being parsed to find a LatLng objects that are then pushed into the
# respective group elements.
#
# Due to data binding, any changes to any group `latlng` value will
# cause the pin to move.
angular.module('google')
  .directive 'groupLocator', ($parse, GoogleMap, $rootScope) ->
    restrict: 'EC'
    template: "<div class=\"map-canvas\"></div>"
    link: ($scope, $elem, attr) ->

      # Ensure map is sized correctly
      $elem.css 'height', attr.height if attr.height

      # Create links to the $scope variables and init map
      gmap = new GoogleMap $elem[0], {
        zoom: parseInt attr.zoom, 10
      }
      window.map = gmap.map
      if attr.mapHandle?
        $parse(attr.mapHandle).assign $scope, gmap

      # Generate info window html
      genContent = (group) ->
        """ <div id="content">
              <h4>#{group.name}</h4>
            </div>"""

      # Assign all groups onto the map
      plotGroups = (groups) ->
        console.log 'Plotting'
        for id, g of groups
          ll = new google.maps.LatLng g.latlng.d, g.latlng.e
          g.marker = gmap.moveMarker g.marker, ll, {
            drag: false
            recenter: false
            content: genContent g
          }

      # Keep map in sync with group latlngs, hide marker if invalid
      $scope.$watchCollection attr.groups, (groups, _old) ->
        console.log 'Detected change'
        setTimeout (-> plotGroups groups), 10


