# Creates a google maps locator. This should be used in a situation
# that requires production of specific locations, and supports live
# generation of latitude and longitude values from dragging pins.
# Example usage.
#
#     <div class="google-locator"
#          location-latlng="latlng"
#          map-handle="gmap">
#     </div>
#
# The above would create a google map object, and link the position of
# the pin currently displayed to the `latlng` scope variable.
#
# The map-handle attribute specifies the scope variable that will be
# assigned a handle to the GoogleMap instance generated by this
# directive. Crucially, this can then be used for other mapping tools.
#
# Querying google geocode should be done separately, with the results
# being parsed to find a single LatLng object that the `latlng` variable
# can then be updated with.
#
# Due to data binding, any changes to the `latlng` variable will move
# the pin directly.
angular.module('google')
  .directive 'googleLocator', ($parse, GoogleMap, $rootScope) ->
    restrict: 'EC'
    template: "<div class=\"map-canvas\"></div>"
    link: (scope, $elem, attr) ->

      # Ensure map is sized correctly
      $elem.css 'height', attr.height

      # Create links to the scope variables and init map
      gmap = new GoogleMap $elem[0], {zoom: attr.zoom}
      if attr.mapHandle?
        $parse(attr.mapHandle).assign scope, gmap

      # Add marker to map, based on initial latlng
      marker = gmap.addMarker null

      # Keep map in sync with latlng, hide marker if invalid
      scope.$watch (-> scope.$eval attr.locationLatlng), (latlng) ->
        if latlng instanceof google.maps.LatLng
          printMessage "Setting new marker position to #{latlng}"
          gmap.moveMarker marker, latlng
        else marker.setMap null

      # Bind drag changes to data
      google.maps.event.addListener marker, 'dragend', ->
        printMessage "New marker location is #{marker.getPosition()}"
        $parse(attr.locationLatlng).assign scope, marker.getPosition()
        scope.$apply()
        marker.setMap gmap.map # make visible if hidden

